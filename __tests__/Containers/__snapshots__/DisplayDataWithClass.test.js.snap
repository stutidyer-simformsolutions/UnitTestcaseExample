// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Display data with class snapshot of the displayData with class component with mount 1`] = `
<DisplayDataWithClass>
  <ForwardRef(SafeAreaView)
    style={
      Object {
        "flex": 1,
        "marginHorizontal": 25,
      }
    }
  >
    <RCTSafeAreaView
      emulateUnlessSupported={true}
      style={
        Object {
          "flex": 1,
          "marginHorizontal": 25,
        }
      }
    >
      <RCTSafeAreaView
        emulateUnlessSupported={true}
        style={
          Object {
            "flex": 1,
            "marginHorizontal": 25,
          }
        }
      >
        <View
          style={
            Object {
              "marginTop": 32,
            }
          }
        >
          <View
            style={
              Object {
                "marginTop": 32,
              }
            }
          >
            <Text
              style={
                Object {
                  "fontSize": 24,
                  "fontWeight": "600",
                }
              }
            >
              <Text
                style={
                  Object {
                    "fontSize": 24,
                    "fontWeight": "600",
                  }
                }
              >
                Enter Value
              </Text>
            </Text>
            <TextInput
              keyboardType="numeric"
              onChangeText={[Function]}
              placeholder="Please enter the number"
              style={
                Object {
                  "borderWidth": 1,
                  "height": 40,
                  "marginVertical": 12,
                  "padding": 10,
                }
              }
              testID="section-textInput"
              value={null}
            >
              <TextInput
                keyboardType="numeric"
                onChangeText={[Function]}
                placeholder="Please enter the number"
                style={
                  Object {
                    "borderWidth": 1,
                    "height": 40,
                    "marginVertical": 12,
                    "padding": 10,
                  }
                }
                testID="section-textInput"
                value={null}
              />
            </TextInput>
            <Button
              disabled={true}
              onPress={[Function]}
              testID="section-button"
              title="Press me"
            >
              <TouchableOpacity
                accessibilityRole="button"
                accessibilityState={
                  Object {
                    "disabled": true,
                  }
                }
                disabled={true}
                onPress={[Function]}
                testID="section-button"
              >
                <TouchableOpacity
                  accessibilityRole="button"
                  accessibilityState={
                    Object {
                      "disabled": true,
                    }
                  }
                  disabled={true}
                  hostRef={null}
                  onPress={[Function]}
                  testID="section-button"
                >
                  <ForwardRef(AnimatedComponentWrapper)
                    accessibilityRole="button"
                    accessibilityState={
                      Object {
                        "disabled": true,
                      }
                    }
                    accessible={true}
                    focusable={true}
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                    testID="section-button"
                  >
                    <AnimatedComponent
                      accessibilityRole="button"
                      accessibilityState={
                        Object {
                          "disabled": true,
                        }
                      }
                      accessible={true}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Array [
                          undefined,
                          Object {
                            "opacity": 1,
                          },
                        ]
                      }
                      testID="section-button"
                    >
                      <View
                        accessibilityRole="button"
                        accessibilityState={
                          Object {
                            "disabled": true,
                          }
                        }
                        accessible={true}
                        collapsable={false}
                        focusable={true}
                        onClick={[Function]}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                        testID="section-button"
                      >
                        <View
                          accessibilityRole="button"
                          accessibilityState={
                            Object {
                              "disabled": true,
                            }
                          }
                          accessible={true}
                          collapsable={false}
                          focusable={true}
                          onClick={[Function]}
                          onResponderGrant={[Function]}
                          onResponderMove={[Function]}
                          onResponderRelease={[Function]}
                          onResponderTerminate={[Function]}
                          onResponderTerminationRequest={[Function]}
                          onStartShouldSetResponder={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                            }
                          }
                          testID="section-button"
                        >
                          <View
                            style={
                              Array [
                                Object {},
                                Object {},
                              ]
                            }
                          >
                            <View
                              style={
                                Array [
                                  Object {},
                                  Object {},
                                ]
                              }
                            >
                              <Text
                                disabled={true}
                                style={
                                  Array [
                                    Object {
                                      "color": "#007AFF",
                                      "fontSize": 18,
                                      "margin": 8,
                                      "textAlign": "center",
                                    },
                                    Object {
                                      "color": "#cdcdcd",
                                    },
                                  ]
                                }
                              >
                                <Text
                                  disabled={true}
                                  style={
                                    Array [
                                      Object {
                                        "color": "#007AFF",
                                        "fontSize": 18,
                                        "margin": 8,
                                        "textAlign": "center",
                                      },
                                      Object {
                                        "color": "#cdcdcd",
                                      },
                                    ]
                                  }
                                >
                                  Press me
                                </Text>
                              </Text>
                            </View>
                          </View>
                          <PressabilityDebugView
                            color="cyan"
                          />
                        </View>
                      </View>
                    </AnimatedComponent>
                  </ForwardRef(AnimatedComponentWrapper)>
                </TouchableOpacity>
              </TouchableOpacity>
            </Button>
            <FlatList
              contentContainerStyle={
                Object {
                  "flexGrow": 1,
                }
              }
              data={Array []}
              keyExtractor={[Function]}
              renderItem={[Function]}
            >
              <VirtualizedList
                contentContainerStyle={
                  Object {
                    "flexGrow": 1,
                  }
                }
                data={Array []}
                getItem={[Function]}
                getItemCount={[Function]}
                keyExtractor={[Function]}
                removeClippedSubviews={false}
                renderItem={[Function]}
                viewabilityConfigCallbackPairs={Array []}
              >
                <VirtualizedListContextProvider
                  value={
                    Object {
                      "cellKey": null,
                      "debugInfo": Object {
                        "cellKey": "rootList",
                        "horizontal": false,
                        "listKey": "rootList",
                        "parent": undefined,
                      },
                      "getNestedChildState": [Function],
                      "getOutermostParentListRef": [Function],
                      "getScrollMetrics": [Function],
                      "horizontal": false,
                      "registerAsNestedChild": [Function],
                      "unregisterAsNestedChild": [Function],
                    }
                  }
                >
                  <ScrollView
                    contentContainerStyle={
                      Object {
                        "flexGrow": 1,
                      }
                    }
                    data={Array []}
                    getItem={[Function]}
                    getItemCount={[Function]}
                    keyExtractor={[Function]}
                    onContentSizeChange={[Function]}
                    onLayout={[Function]}
                    onMomentumScrollBegin={[Function]}
                    onMomentumScrollEnd={[Function]}
                    onScroll={[Function]}
                    onScrollBeginDrag={[Function]}
                    onScrollEndDrag={[Function]}
                    removeClippedSubviews={false}
                    renderItem={[Function]}
                    scrollEventThrottle={50}
                    stickyHeaderIndices={Array []}
                    viewabilityConfigCallbackPairs={Array []}
                  >
                    <RCTScrollView
                      contentContainerStyle={
                        Object {
                          "flexGrow": 1,
                        }
                      }
                      data={Array []}
                      getItem={[Function]}
                      getItemCount={[Function]}
                      keyExtractor={[Function]}
                      onContentSizeChange={[Function]}
                      onLayout={[Function]}
                      onMomentumScrollBegin={[Function]}
                      onMomentumScrollEnd={[Function]}
                      onScroll={[Function]}
                      onScrollBeginDrag={[Function]}
                      onScrollEndDrag={[Function]}
                      removeClippedSubviews={false}
                      renderItem={[Function]}
                      scrollEventThrottle={50}
                      stickyHeaderIndices={Array []}
                      viewabilityConfigCallbackPairs={Array []}
                    >
                      <RCTScrollView
                        contentContainerStyle={
                          Object {
                            "flexGrow": 1,
                          }
                        }
                        data={Array []}
                        getItem={[Function]}
                        getItemCount={[Function]}
                        keyExtractor={[Function]}
                        onContentSizeChange={[Function]}
                        onLayout={[Function]}
                        onMomentumScrollBegin={[Function]}
                        onMomentumScrollEnd={[Function]}
                        onScroll={[Function]}
                        onScrollBeginDrag={[Function]}
                        onScrollEndDrag={[Function]}
                        removeClippedSubviews={false}
                        renderItem={[Function]}
                        scrollEventThrottle={50}
                        stickyHeaderIndices={Array []}
                        viewabilityConfigCallbackPairs={Array []}
                      >
                        <View>
                          <View />
                        </View>
                      </RCTScrollView>
                    </RCTScrollView>
                  </ScrollView>
                </VirtualizedListContextProvider>
              </VirtualizedList>
            </FlatList>
          </View>
        </View>
      </RCTSafeAreaView>
    </RCTSafeAreaView>
  </ForwardRef(SafeAreaView)>
</DisplayDataWithClass>
`;

exports[`Display data with class snapshot of the displayData with class component with shallow 1`] = `
<ForwardRef(SafeAreaView)
  style={
    Object {
      "flex": 1,
      "marginHorizontal": 25,
    }
  }
>
  <View
    style={
      Object {
        "marginTop": 32,
      }
    }
  >
    <Text
      style={
        Object {
          "fontSize": 24,
          "fontWeight": "600",
        }
      }
    >
      Enter Value
    </Text>
    <TextInput
      keyboardType="numeric"
      onChangeText={[Function]}
      placeholder="Please enter the number"
      style={
        Object {
          "borderWidth": 1,
          "height": 40,
          "marginVertical": 12,
          "padding": 10,
        }
      }
      testID="section-textInput"
      value={null}
    />
    <Button
      disabled={true}
      onPress={[Function]}
      testID="section-button"
      title="Press me"
    />
    <FlatList
      contentContainerStyle={
        Object {
          "flexGrow": 1,
        }
      }
      data={Array []}
      keyExtractor={[Function]}
      renderItem={[Function]}
    />
  </View>
</ForwardRef(SafeAreaView)>
`;
